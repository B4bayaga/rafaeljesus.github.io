+++ 
draft = true
date = 2025-06-10T10:21:35-03:00
title = "Dando Vida ao Meu Blog"
description = "Um Guia Pr√°tico com Hugo"
slug = "iniciando-meu-blog-com-hugo"
authors = ["Rafael Jesus"]
tags = []
categories = ["Tutoriais"]
externalLink = ""
series = []
#featuredImage = "/images/hugo_server.png"
+++
# <center>Dando Vida ao Meu Blog: Um Guia Pr√°tico com [Hugo](https://gohugo.io/)</center>

Para come√ßar, qual tecnologia usar para construir e publicar o **Meu Blog**?

A resposta para essa pergunta foi francamente dif√≠cil devido a vasta quantidade de op√ß√µes existentes. E logo de cara, pensei em construir com ferramentas que "domino" (na data que escrevo este artigo), que s√£o [Python](https://www.python.org/) com [Django](https://www.djangoproject.com/), depois obviamente pensei em [Wordpress](https://wordpress.org/), [Plone](https://plone.org/) entre outras. Passei uma semana inteira apenas para escolher que tecnologia usar, e foi quando vi um post do [Fabio Akita](https://github.com/akitaonrails), no post, ele descrevia como foi migrar o seu blog [AkitaOnRails](https://akitaonrails.com/), salve engano escrito em [Rails](https://rubyonrails.org/), para usar o **Hugo**.

Mas, que diabos √© **Hugo**? ü§î

Pois bem, fui pesquisar e descobrir que **Hugo** √© um software de c√≥digo aberto escrito em [Go](https://go.dev/) utilizado para gerar **sites est√°ticos** com a promessa de ser "extremamente r√°pido" e "eficiente". Ele √© usado para construir diversos tipos de sites, mas √© especialmente popular na cria√ß√£o de *Blogs*, *Sites de Documenta√ß√£o*, *Portf√≥lios Pessoais ou Profissionais*, etc...

Entre as vantagens que o **Hugo** traz por padr√£o, como escrita em *Markdown* e uma vasta quantidade de ***Themes***, o que mais me chamou aten√ß√£o, foi a possibilidade de hospedar o **Meu Blog** no **Github Pages** totalmente **free**, o que para a natureza do projeto se encaixa como uma luva.

Mas, do que vou precisar? üßê

Bom, para come√ßar acessei a documenta√ß√£o do [**Hugo**](https://gohugo.io/documentation/), e descobri que n√£o tem como digitar um `sudo apt install hugo` e pronto, √© s√≥ sair digitando loucamente, ent√£o resolvi fazer um checklist:

- [ ] 	Instalar a linguagem [Go](https://go.dev/).
- [ ] 	Instalar o [Hugo](https://gohugo.io/).
- [ ] 	Configurar o reposit√≥rio no [GitHub](https://github.com/B4bayaga/rafaeljesus.github.io).
- [ ] 	Instalar o [Theme](https://themes.gohugo.io/themes/hugo-coder/).
- [ ] 	Configurar DNS do Dom√≠nio.
- [ ] 	Configurar o [GitHub Pages](https://pages.github.com/).
- [ ] 	Configurar Workflow [GitHub Actions](https://github.com/features/actions).

## Instalando a linguagem [Go](https://go.dev/). üíΩ

Antes de seguir com a instala√ß√£o da linguagem de programa√ß√£o **GO**, devo explicar que uso o sistema operacional [Linux](https://www.linux.org/) na distribui√ß√£o [Pop!_OS](https://system76.com/), por tanto, todo processo de instala√ß√£o e configura√ß√£o se baseiam nessa configura√ß√£o de sistema operacional.
Dito isto, vamos para a [documenta√ß√£o](https://go.dev/doc/install) oficial do **GO**, que pede para rodar o comando:

``` rm -rf /usr/local/go && tar -C /usr/local -xzf go1.24.4.linux-amd64.tar.gz ```

Esse comando remove qualquer instala√ß√£o anterior do **GO**, exclui a pasta ` /usr/local/go ` (caso exista), depois baixa e extrai o arquivo ` *.tar.gz `, na sequencia criando uma nova √°rvore de diret√≥rios do Go em ` /usr/local/go `.

Agora adicionamos o caminho do bin√°rio na vari√°vel de ambiente do sistema com o comando:

` export PATH=$PATH:/usr/local/go/bin `

Agora basta digitar ainda no terminal basta digitar:

 ` go version `
 
A sa√≠da dever conter a vers√£o do **GO**, o que mostra que foi instalado com sucesso.

- [x] 	Instalar a linguagem [Go](https://go.dev/).

## Intalando o Hugo. üíæ

Agora voltamos √† documenta√ß√£o do [**Hugo**](https://gohugo.io/installation/linux/). Aqui um parentese, a documenta√ß√£o orienta instalar via **snap**, por√©m, optei pela instala√ß√£o via [GitHub](https://github.com/gohugoio/hugo?tab=readme-ov-file), mais precisamente a vers√£o ***extended edition***. O primeiro motivo √© que alguns temas do **Hugo** exigem vers√£o **extended**, o outro motivo √© simplesmente por que eu quis. üò©

Continuando, no terminal rode o comando:

``` CGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest ```

Para testar se tudo ocorreu bem rode:

``` hugo version ```

Mais uma v√™s, a sa√≠da sendo a vers√£o do **Hugo**, tudo ocerreu bem.

- [x] 	Instalar o [Hugo](https://gohugo.io/).

## Configurar o reposit√≥rio no [GitHub](https://github.com/B4bayaga/rafaeljesus.github.io). üíª

Criei dois reposit√≥rios no GitHub, um privado para hospedar o c√≥digo fonte do **Meu Blog** e outro reposit√≥rio **p√∫blico** para configurar posteriormente o GitHub Pages e torn√°-lo p√∫blico para o mundo.

A ideia √© organizar o meu projeto de forma mais eficiente. Pense nisso como ter duas pastas interligadas:

1. Uma pasta privada onde guardarei todo o "esqueleto" e o conte√∫do bruto do **Meu Blog** e arquivos de configura√ß√£o do Hugo.
2. Uma pasta p√∫blica, que fica dentro da primeira, contendo apenas o site pronto para ser publicado na internet.

Para **"conectar"** as duas, vamos usar um recurso do Git chamado subm√≥dulo. Configuraremos o reposit√≥rio p√∫blico que chamei de  ` rafaeljesus.github.io ` (onde o Hugo ir√° gerar o **Meu Blog**), para ser um subm√≥dulo dentro do nosso projeto privado. Este subm√≥dulo ser√° "montado" no diret√≥rio ` public/`, que √© exatamente onde o Hugo gera e armazena a vers√£o final do site/blog.

Em resumo: O reposit√≥rio principal e privado conter√° o c√≥digo-fonte, enquanto a subpasta ` public/ ` ser√° um clone direto e atualiz√°vel do reposit√≥rio p√∫blico, mantendo tudo sincronizado e organizado.

Uma v√™s definido e explicado a estrutura do **Meu Blog** vamos para o terminal. Clonamos o reposit√≥rio privado com o comando:

` git clone https://github.com/meu-id/meu-repositorio.git `

Agora, criamos o projeto com **Hugo** usando o comando abaixo:

` hugo new site meu-repositorio --force `

A *flag* ` --force ` for√ßa o **Hugo** a criar o site em um diret√≥rio existente, no meu caso o reposit√≥rio privado que clonei anteriormente.

Agora, com o comando ` cd meu-repositorio `, entramos no diret√≥rio do reposit√≥rio e criamos um **subm√≥dulo** do git, clonando o **reposit√≥rio publico** e nomeando o diret√≥rio como ` public/ `, conforme a explica√ß√£o anterior, isso tudo usando o comando a seguir:

` git submodule add https://github.com/meu-id/meu-repositorio.git public `

Com isso temos a estrutura de diret√≥rios pronta e reposit√≥rios devidamente clonados para versionamento, publica√ß√£o, etc... do projeto.

- [x] 	Configurar o reposit√≥rio no [GitHub](https://github.com/B4bayaga/rafaeljesus.github.io).

## Instalar o [Theme](https://themes.gohugo.io/themes/hugo-coder/). üéÄ

Outro ponto interessante do Hugo √© a quantidade de **Temas ([Themes](https://themes.gohugo.io/))**, p√°ginas prontas de f√°cil configura√ß√£o, personaliza√ß√£o e a grande maioria com boa documenta√ß√£o. Ap√≥s escolha do **Tema** e ler a documenta√ß√£o do mesmo, seguimos no terminal para realizar a instala√ß√£o.

Dentro do diret√≥rio privado, aquele que contem o c√≥digo **"bruto"** do projeto, criarei novamente um submodulo com **Git**, s√≥ que agora clonando o **Tema(Them)** dentro do diret√≥rio ` themes/ ` com o comando abaixo:

`  git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder `  

**Ok üëå**, agora vou configurar o **Theme** no arquivo ` hugo.toml ` no nosso diret√≥rio principal.

No **GitHub** do **Theme** que escolhi, tem um exemplo de arquivo ` hugo.toml `, s√£o as [configura√ß√µes m√≠nimas](https://github.com/luizdepra/hugo-coder/blob/main/docs/configurations.md#complete-example) para que ele funcione, basta copiar e colar no arquivo ` hugo.toml ` do seu projeto, substituir metadados pessoas, como por exemplo ` baseURL,title `.

Pronto, com o arquivo ` hugo.toml ` configurado √© hora de subir o **Hugo** localmente com o comando abaixo e verificar se tudo deu certo:

` hugo server `

![Print imagem terminal rodando comando hugo server](/images/hugo_server.png)

- [x] 	Instalar o [Theme](https://themes.gohugo.io/themes/hugo-coder/).

## Configurar DNS do Dom√≠nio. 